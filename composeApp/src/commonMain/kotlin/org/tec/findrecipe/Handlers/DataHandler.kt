package org.tec.findrecipe.Handlers

import org.tec.findrecipe.Database
import org.tec.findrecipe.FavoriteTableQueries
import org.tec.findrecipe.RecipeClass

// This class acts as a data handler and provides operations (like adding, removing, and fetching data) for managing favorite recipes in the database
class DataHandler(database: Database) {
    // The 'queries' object is the generated query interface for accessing the 'FavoriteTable' in the database.
    val queries: FavoriteTableQueries = database.favoriteTableQueries

    // Suspend function to get all favorite recipes from the database.
    // 'suspend' means that the function can be paused and resumed, and it must be called inside a coroutine.
    suspend fun GetFavoriteRecipes(): List<RecipeClass> {
        // Execute the query to select all records and map the results to RecipeClass objects.
        // The 'selectAll()' function is likely generated by your database library.
        return queries.selectAll().executeAsList().map { row ->
            // Here we're converting the database row into a RecipeClass object.
            RecipeClass(
                Id = row.Id,                // Assign the ID from the database row to the RecipeClass's Id
                Title = row.Title.toString(),  // Convert the Title column value to a String
                Instruction = row.Instruction.toString(),  // Convert the Instruction column value to a String
                ImageUrl = row.ImageUrl.toString(),  // Convert the ImageUrl column value to a String
                IngredientsAndMeasurements = row.Ingredients.toString()  // Convert the Ingredients column value to a String
            )
        }
    }

    // Suspend function to add a favorite recipe to the database.
    suspend fun AddFavoriteRecipeToDatabase(recipe: RecipeClass): Boolean {
        return try {
            // Try to insert the recipe into the database.
            // The 'addRecipe' function is generated by your database library and inserts the recipe details into the 'FavoriteTable'.
            queries.addRecipe(
                recipe.Title,          // Pass the Title of the recipe
                recipe.Instruction,    // Pass the Instruction for the recipe
                recipe.ImageUrl,       // Pass the Image URL of the recipe
                recipe.IngredientsAndMeasurements     // Pass the Ingredients and Measurements as a single string
            )
            // If the insert was successful, return true.
            true
        } catch (e: Exception) {
            // If an error occurs during the insert, we catch it and print the error.
            // You can customize this to show an error message to the user.
            e.printStackTrace()
            // Return false if the operation failed.
            false
        }
    }

    // Suspend function to remove a favorite recipe from the database.
    suspend fun RemoveFavoriteRecipeFromDatabase(id: Long?): Boolean {
        return try {
            // Check if the ID is not null before attempting to remove the recipe from the database.
            // If the ID is valid, execute the delete query.
            if (id != null) {
                queries.removeRecipe(id)  // Remove the recipe with the provided ID from the database
                true  // Return true if the delete operation was successful
            }
            else {
                // If the ID is null, throw an exception to indicate that the ID is invalid.
                throw Exception("Invalid ID")
            }
        } catch (e: Exception) {
            // If an error occurs during the delete operation, catch the error and print it.
            // You can customize this to show an error message to the user.
            e.printStackTrace()
            // Return false if the operation failed.
            false
        }
    }
}
